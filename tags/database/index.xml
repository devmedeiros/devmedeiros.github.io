<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>database on devmedeiros</title>
    <link>https://devmedeiros.com/tags/database/</link>
    <description>Recent content in database on devmedeiros</description>
    <image>
      <title>devmedeiros</title>
      <url>https://devmedeiros.com/cover.png</url>
      <link>https://devmedeiros.com/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 Nov 2023 18:45:00 -0300</lastBuildDate><atom:link href="https://devmedeiros.com/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Navigating Data Testing</title>
      <link>https://devmedeiros.com/post/navigating-data-testing/</link>
      <pubDate>Mon, 20 Nov 2023 18:45:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/post/navigating-data-testing/</guid>
      <description>What is Data Testing and why you should care about it?</description>
      <content:encoded><![CDATA[<h2 id="introduction-to-data-testing">Introduction to Data Testing</h2>
<p>Data testing comes from software testing in computer science, when it is tested various parts of the code to assess if it&rsquo;s fit for use. In this sense, when testing your data you want to evaluate if the data is <strong>accurate</strong>, <strong>completed</strong>, and <strong>consistent</strong>.</p>
<p>So you want to make sure what you are extracting and sending is what you expect, making sure you are not losing data by changing data formats and transforming the data. When moving your data from point A to point B, you want to guarantee that the data is the same and has the same information.</p>
<p>One way to do this is by using common database structures, setting data types, and defining table constraints. But if this is not enough you can set more complex rules by using other tools, such as <a href="https://greatexpectations.io/"><strong>Great Expectations</strong></a>, and <a href="https://docs.ropensci.org/assertr/"><strong>assertr</strong></a>.</p>
<h2 id="common-database-structure">Common Database Structure</h2>
<p>When creating or altering a table on a database, you need to specify the column&rsquo;s data types and you can set multiple constraints. These data types determine how the values look, so imagine you have a table listing employees&rsquo; basic info, like their names, salary, and date of birth.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Salary</th>
<th>Date of Birth</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ana</td>
<td>3000.00</td>
<td>1988-02-02</td>
</tr>
<tr>
<td>Bob</td>
<td>4000.00</td>
<td>1970-04-12</td>
</tr>
<tr>
<td>Carl</td>
<td>2000.00</td>
<td>1999-07-05</td>
</tr>
</tbody>
</table>
<p>The salary column would be of type numeric, double digits because that is how we format currency. The date of birth would be of a &ldquo;date&rdquo; type format and the name a simple string. These data types are a kind of constraint, if you create a table with these data types you cannot insert a new row with different data types.</p>
<p>But you can also add more constraints, you could set a column to never accept null/empty values, or set a column to be composed of unique values.</p>
<p>Setting data types and constraints is vital to maintaining data integrity because whenever someone or something (like an automatic process) tries to add or alter a piece of information on a table that has constraints it will raise an error. These errors help users avoid typos or inserting invalid options that may break other applications.</p>
<p>Imagine you have a system that sends a happy birthday present to an employee automatically, if that employee doesn&rsquo;t have a date of birth registered they&rsquo;ll never get their happy birthday present. So making it impossible to leave the birthday empty helps users pay attention use the database correctly and keep everything working as intended.</p>
<h3 id="limitations">Limitations</h3>
<p>When we usually think about data unit testing, or testing your data to make sure that nothing is out of the ordinary, is easy to imagine how relying only on data constraints is a good idea. It covers most use cases that we normally use, but if we stop to think about it, we can find more uses that we don&rsquo;t even know we need.</p>
<p>In our employee example table, sure setting the salary to be a numeric data type with decimals usually stops a lot of potential mistakes, but it doesn&rsquo;t stop people from having a negative salary or even an absurd salary amount. Sure you can set how big a number can be, but it only defines the digits, so if your maximal salary is 10000, you will have to set it to be 9,999 or 99,999.</p>
<p>Of course, it helps, but it doesn&rsquo;t fully solve the problem.</p>
<p>Another example of a limitation would be complex rules, for instance, if the employees have seniority levels like I, II, and III, and these come with salary range, you can&rsquo;t have a custom rule saying <em>&ldquo;from level I the salary range is 1000 to 2000&rdquo;</em>.</p>
<h2 id="beyond-constraints">Beyond Constraints</h2>
<p>If you need to set more custom and/or business-specific data validation rules you can use <a href="https://greatexpectations.io/"><strong>Great Expectations</strong></a>, and <a href="https://docs.ropensci.org/assertr/"><strong>assertr</strong></a>. Both are great for defining rules and validation parameters to test your data.</p>
<p>You can write tests setting min and max values, check unique values, check if the values are within a given set and many more options.</p>
<p>In conclusion, navigating data testing involves a careful balance between relying on conventional database structures and using specialized tools like <strong>Great Expectations</strong> and <strong>assertr</strong>. While constraints play a crucial role in maintaining data integrity, recognizing their limitations highlights the need for more nuanced and business-specific validation rules. By embracing these tools, data engineers and analysts can ensure not only the accuracy and completeness of their data but also navigate the complexities of real-world scenarios.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Use SQLite Database with Github Actions</title>
      <link>https://devmedeiros.com/post/sqlite-database-github-actions/</link>
      <pubDate>Wed, 31 May 2023 21:54:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/post/sqlite-database-github-actions/</guid>
      <description>Discover a free alternative to cloud engines for data scraping on GitHub Actions!</description>
      <content:encoded><![CDATA[<p>Recently I’ve been working with a data scraping project that works with a small amount of data, small enough that free resources/tier from the most popular cloud engines are enough to allocate my data, but I don’t like having the risk of being billed over this personal project. To solve this I’ve been looking for a free alternative that I can share and that runs automatically with Github Actions.</p>
<p>If you want to check out the repo that contains the code discussed in this post, follow this <a href="https://github.com/devmedeiros/template-sqlite-actions">link</a>.</p>
<blockquote>
<p>I&rsquo;ll illustrate how to integrate SQLite Databases with Github Actions using Python, but if you know how to modify a file using another programming language this post is still relevant to you.</p>
</blockquote>
<h2 id="writing-your-data-generatorscrapper">Writing your Data Generator/Scrapper</h2>
<p>First, your project needs to be on a repository, in my case, I’m using Github. I wrote a Python code that scrapes a webpage and saves the data to a SQLite database, on this example I’ll illustrate this with a much simpler code.</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Import libraries</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sqlalchemy <span style="color:#f92672">import</span> create_engine
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create random data</span>
</span></span><span style="display:flex;"><span>people <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Ana&#39;</span>, <span style="color:#e6db74">&#39;Bob&#39;</span>, <span style="color:#e6db74">&#39;Charles&#39;</span>, <span style="color:#e6db74">&#39;Daiana&#39;</span>]
</span></span><span style="display:flex;"><span>values <span style="color:#f92672">=</span> [random<span style="color:#f92672">.</span>random(), random<span style="color:#f92672">.</span>random(), random<span style="color:#f92672">.</span>random(), random<span style="color:#f92672">.</span>random()]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create db connection</span>
</span></span><span style="display:flex;"><span>engine <span style="color:#f92672">=</span> create_engine(<span style="color:#e6db74">&#39;sqlite:///data.db&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the dataframe</span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#39;people&#39;</span>: people, <span style="color:#e6db74">&#39;values&#39;</span>: values, <span style="color:#e6db74">&#39;load_date&#39;</span>: datetime<span style="color:#f92672">.</span>now()})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Save the data frame</span>
</span></span><span style="display:flex;"><span>data<span style="color:#f92672">.</span>to_sql(<span style="color:#e6db74">&#39;data&#39;</span>, if_exists<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;append&#39;</span>, con<span style="color:#f92672">=</span>engine, index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="setting-the-workflow">Setting the Workflow</h2>
<p>If you run the above code multiple times on a local machine it’ll work, but you’ll notice that on Github it’ll not persist the changes, that is because you need to commit the changes. To do this you’ll need to create a workflow, on your repo create a yaml file on <code>.github/workflow</code>. This file is going to be your workflow, you can choose any name you want.</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># name your workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">random data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># definy the frequency it&#39;ll run</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schedule</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#34;0 * * * *&#34;</span> <span style="color:#75715e"># hourly</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ACTIONS_ALLOW_UNSECURE_COMMANDS</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># create the jobs</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generate-latest</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Checkout repo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up Python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#e6db74">&#39;3.10&#39;</span> <span style="color:#75715e"># setting python version to 3.10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install requirements</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">pip3 install -r requirements.txt</span> <span style="color:#75715e"># setting the environment</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run random data</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">python main.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Commit changes</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git config --global user.name &#34;github-actions&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git config --global user.email &#34;action@github.com&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git add -A
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git commit -m &#34;add more data&#34;</span>          
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push changes</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">ad-m/github-push-action@master</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">github_token</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Don&rsquo;t forget to enable workflow permissions, on your repo go to <code>Settings &gt; Actions &gt; General</code>, and select <strong>Read and write permissions</strong>.</p>
<p><img loading="lazy" src="https://i.imgur.com/pOym60i.png#center" alt="workflow permissions from github official website"  />
</p>
<h2 id="conclusion">Conclusion</h2>
<p>This can be a good free alternative in case you want to be able to share the data you are scraping or generating. But you still need to keep an eye on Github&rsquo;s limitations when using the free version. See the current usage limits on their <a href="https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits">official website</a>.</p>
<hr>
<p>If you would like to see a real-like application of this you can go to <a href="https://github.com/devmedeiros/nota-fiscal-goiana">this repo</a>. Where I&rsquo;ve implemented a monthly scrapper that saves the data to an SQLite database that is available to everyone.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What is SQL?</title>
      <link>https://devmedeiros.com/post/what-is-sql/</link>
      <pubDate>Tue, 07 Mar 2023 20:02:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/post/what-is-sql/</guid>
      <description>SQL stands for Structured Query Language. A query language is a specialized programming language that you can use to search and change the contents of a database.</description>
      <content:encoded><![CDATA[<p>SQL stands for Structured Query Language. A query language is a specialized programming language that you can use to search and change the contents of a database.</p>
<p>Like English, SQL has different dialects with special keywords. Most keywords on different dialects are the same, these are the standard SQL, but there are more dialects specific to some databases like:</p>
<ul>
<li>PostgreSQL</li>
<li>SQL Server</li>
<li>Oracle SQL</li>
</ul>
<p>When a keyword is specific to a dialect, usually, you can find an equivalent in another dialect. So you can focus on learning your preferred dialect and when you need to use another database you can easily look up how to do what you want in the other dialect, for instance, <code>oracle sql nvl on postgre</code>.</p>
<h2 id="which-should-you-learn">Which should you learn?</h2>
<p>The knowledge from learning any SQL dialect is transferable, so you can choose whichever you like. If you have contact with a database take advantage of that and learn it, but if you don&rsquo;t have any connection any choice will be good enough.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Have COVID Impacted California Traffic Collisions?</title>
      <link>https://devmedeiros.com/post/sql-california-traffic/</link>
      <pubDate>Tue, 02 Nov 2021 17:14:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/post/sql-california-traffic/</guid>
      <description>Using SQL to analyze if COVID impacted California Traffic Collisions</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>COVID-19 has changed many things in our day-to-day life, from ordering more delivery, working from home, or even just getting a new pet. And now I want to see if it has impacted traffic crashes in California. The dataset that I’ll be using comes from Kaggle. It covers collisions from January 2001 up to December 2020 from California. <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> The following are the tables present in the dataset:</p>
<ul>
<li>case_id</li>
<li>collisions</li>
<li>parties</li>
<li>victims</li>
</ul>
<p>The <strong>case_id</strong> contains the <em>case_id</em> and <em>db_year</em>. The <strong>collisions</strong> table contains all the information about each collision. While the <strong>parties</strong> table contains information about all the parties involved in the collisions, in this case, parties can be drivers, pedestrians, cyclists, and parked vehicles. The <strong>victims</strong> table contain information about all the victims, it also includes passengers.</p>
<p>To answer if the pandemic has impacted the collisions I need to separate my data. Knowing that the first case of COVID was on January 26, 2020, in California. <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> I’ll be separating the dataset as before COVID for every crash that happened before the first case and after COVID for every crash on the same day and forward.</p>
<p>To compare <em>before COVID</em> and <em>after COVID</em> I’ll looking at a couple of things, <strong>Proportion of DUIs</strong> and <strong>Fatality of Crashes</strong>.</p>
<p>To do this I’ll be querying the database with SQLite through R. For the complete code go to my GitHub <a href="https://github.com/devmedeiros/california-traffic-collisions">repo</a>.</p>
<h2 id="proportion-of-duis">Proportion of DUIs</h2>
<p>Alcohol use has changed in the US during the pandemic <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> and with all the lockdowns and working from home we may wonder if this alcohol use has caused more crashes or not. With this in mind we take a look at our data about California.</p>
<p>As we can see from the following table, the percentages before and after COVID are very similar. Only <strong>7.3%</strong> and <strong>8.96%</strong> of violations occurred from DUIs.</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:right">Before COVID</th>
<th style="text-align:right"></th>
<th style="text-align:right">After COVID</th>
<th style="text-align:right"></th>
</tr>
</thead>
<tbody>
<tr>
<td>Violation</td>
<td style="text-align:right">Qnty</td>
<td style="text-align:right">Perc</td>
<td style="text-align:right">Qnty</td>
<td style="text-align:right">Perc</td>
</tr>
<tr>
<td>DUI</td>
<td style="text-align:right">653467</td>
<td style="text-align:right">7.3</td>
<td style="text-align:right">42169</td>
<td style="text-align:right">8.96</td>
</tr>
<tr>
<td>Other</td>
<td style="text-align:right">8300399</td>
<td style="text-align:right">92.7</td>
<td style="text-align:right">428299</td>
<td style="text-align:right">91.04</td>
</tr>
</tbody>
</table>
<h2 id="fatality-of-crashes">Fatality of Crashes</h2>
<p>Moving on to our next task, to see if crashes after COVID became more or less fatal. The analysis is going to look at how many people died from collisions, how many got some injury, and no injury at all.</p>
<p>Looking at the table below you can see that the percentage of collisions that resulted in someone dying was <strong>0.74%</strong> before the pandemic and is now <strong>1.29%</strong>, is not a big difference, but when you look at <em>no injury</em>, you can see that before COVID <strong>45.24%</strong> of collisions didn&rsquo;t result in someone having an injury and after the pandemic, this number drops to <strong>18.57%</strong>. This <em>could</em> indicate some influence of the pandemic, but further research is needed.</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:right">Before COVID</th>
<th style="text-align:right"></th>
<th style="text-align:right">After COVID</th>
<th style="text-align:right"></th>
</tr>
</thead>
<tbody>
<tr>
<td>Degree of Injury</td>
<td style="text-align:right">Qnty</td>
<td style="text-align:right">Perc</td>
<td style="text-align:right">Qnty</td>
<td style="text-align:right">Perc</td>
</tr>
<tr>
<td>Death</td>
<td style="text-align:right">68875</td>
<td style="text-align:right">0.74</td>
<td style="text-align:right">4131</td>
<td style="text-align:right">1.29</td>
</tr>
<tr>
<td>Some injury</td>
<td style="text-align:right">5033610</td>
<td style="text-align:right">54.02</td>
<td style="text-align:right">257057</td>
<td style="text-align:right">80.14</td>
</tr>
<tr>
<td>No injury</td>
<td style="text-align:right">4216085</td>
<td style="text-align:right">45.24</td>
<td style="text-align:right">59576</td>
<td style="text-align:right">18.57</td>
</tr>
</tbody>
</table>
<h3 id="references">References</h3>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.kaggle.com/alexgude/california-traffic-collision-data-from-switrs">Alexander Gude and California Highway Patrol, “California Traffic Collision Data from SWITRS.” Kaggle, 2021, doi: 10.34740/KAGGLE/DSV/2569326.</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://abc7news.com/timeline-of-coronavirus-us-covid-19-bay-area-sf/6047519/">Timeline of Coronavirus US</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2770975">Pollard MS, Tucker JS, Green HD. Changes in Adult Alcohol Use and Consequences During the COVID-19 Pandemic in the US. JAMA Netw Open. 2020;3(9):e2022942. doi:10.1001/jamanetworkopen.2020.22942</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
