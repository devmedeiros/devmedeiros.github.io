<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tutorial on devmedeiros</title>
    <link>https://devmedeiros.com/tags/tutorial/</link>
    <description>Recent content in tutorial on devmedeiros</description>
    <image>
      <title>devmedeiros</title>
      <url>https://devmedeiros.com/cover.png</url>
      <link>https://devmedeiros.com/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 05 Aug 2023 07:30:00 -0300</lastBuildDate><atom:link href="https://devmedeiros.com/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Add Like/Clap Buttons on your Static Website with Lyket</title>
      <link>https://devmedeiros.com/post/like-button-static-website-lyket/</link>
      <pubDate>Sat, 05 Aug 2023 07:30:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/post/like-button-static-website-lyket/</guid>
      <description>Learn how to add a like/clap button to your static website using Lyket.</description>
      <content:encoded><![CDATA[<p>This tutorial is focused on <strong>Hugo</strong>, but it can easily be adapted for other static website frameworks.</p>
<p>I&rsquo;ve found many alternatives to add claps or likes to your website, but none was customizable as I wanted it to be, or it would require me to change my website hosting.</p>
<p>I recently found out about Lyket and started using it. I&rsquo;ll guide you on how to set it up on your website.</p>
<h2 id="setting-lyket-api">Setting Lyket API</h2>
<p>The Lyket API provides a free tier, with no credit card needed to sign-up. To use it on a static site you&rsquo;ll need to add the following tag to your website header.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://unpkg.com/@lyket/widget@latest/dist/lyket.js?apiKey=[YOUR-API-KEY]&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><p>You can get an API Key on their website when you sign-up &laquo; <a href="https://lyket.dev/">https://lyket.dev/</a> &raquo;. You can use your public API token without fearing other people using it, you just need to set the allowed websites to your domain.</p>
<p>Then you need to add the button tag where you want it to show, in my case I wanted it to appear on every blog post, but not on the other pages. So I added it to my post footer on my hugo project it&rsquo;s located in <code>layouts/_default/single.html</code> file, on pasted the tag inside the <code>&lt;footer class=&quot;post-footer&quot;&gt;</code> tag.</p>
<p>The html button template will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;clap&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-namespace</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;namespace&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;everybody-clap-now&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-template</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;medium&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-color-text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;currentColor&#34;</span>
</span></span><span style="display:flex;"><span>/&gt;
</span></span></code></pre></div><p>You can change the <code>data-lyket-type</code> to clap, like, updown, and rate. On <code>data-lyket-namespace</code> you can choose whatever name you like, you can use it to separate and organize your pages if you use the same API token on multiple websites, or if you separate your website content into categories you could use &ldquo;blog&rdquo; and &ldquo;projects&rdquo;, for example.</p>
<p>On <code>data-lyket-template</code> you can choose the template for your button, each button type has a different button template, this is optional, if you don&rsquo;t add it it&rsquo;ll turn to the default option, you can see the available options you can see it here: &laquo; <a href="https://lyket.dev/templates">https://lyket.dev/templates</a> &raquo;.</p>
<p>The <code>data-lyket-color-text</code> allows you to personalize the text color of your button (the color of the numbers), you can set one color, but if you have a website that has a dark and light mode, you may prefer to use &lsquo;currentColor&rsquo;.</p>
<p>The <code>data-lyket-id</code> set the counter name, if you want two pages to share the like count it&rsquo;ll need to have the same id. On my Hugo website, I used Hugo to get the page slug to use it as an id, you can use <code>{{ replace (path.Base .RelPermalink) &quot; /&quot; &quot;-&quot; }}</code> template as your id, so even if you translate your content all versions will keep their like count.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;clap&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-namespace</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;namespace&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ replace (path.Base .RelPermalink) &#34;</span> <span style="color:#960050;background-color:#1e0010">/&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#a6e22e">-</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-template</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;medium&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">data-lyket-color-text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;currentColor&#34;</span>
</span></span><span style="display:flex;"><span>/&gt;
</span></span></code></pre></div><h2 id="bonus-tip">Bonus Tip</h2>
<p>You can add a Hugo parameter to hide the like button on pages you don&rsquo;t want to show. Simply add to your page frontmatter a parameter, in this case <code>noLike</code>, and set it to true, so your page would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#e6db74">&#34;Your Awesome Page Title&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">layout</span>: <span style="color:#e6db74">&#34;single&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">noLike</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><p>Then on your single.html file, you add the if clause to hide the button, in the end, it&rsquo;ll look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{- if not .Params.noLike }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">data-lyket-type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;clap&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">data-lyket-namespace</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;namespace&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">data-lyket-id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ replace (path.Base .RelPermalink) &#34;</span> <span style="color:#960050;background-color:#1e0010">/&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#a6e22e">-</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">data-lyket-template</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;medium&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">data-lyket-color-text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;currentColor&#34;</span>
</span></span><span style="display:flex;"><span>    /&gt;
</span></span><span style="display:flex;"><span>{{- end }}
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>How to Use SQLite Database with Github Actions</title>
      <link>https://devmedeiros.com/post/sqlite-database-github-actions/</link>
      <pubDate>Wed, 31 May 2023 21:54:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/post/sqlite-database-github-actions/</guid>
      <description>Discover a free alternative to cloud engines for data scraping on GitHub Actions!</description>
      <content:encoded><![CDATA[<p>Recently I’ve been working with a data scrapping project that works with a small amount of data, small enough that free resources/tier from the most popular cloud engines are enough to allocate my data, but I don’t like having the risk of being billed over this personal project. To solve this I’ve been looking for a free alternative that I can share and that runs automatically with Github Actions.</p>
<p>If you want to check out the repo that contains the code discussed in this post, follow this <a href="https://github.com/devmedeiros/template-sqlite-actions">link</a>.</p>
<blockquote>
<p>I&rsquo;ll illustrate how to integrate SQLite Databases with Github Actions using Python, but if you know how to modify a file using another programming language this post is still relevant to you.</p>
</blockquote>
<h2 id="writing-your-data-generatorscrapper">Writing your Data Generator/Scrapper</h2>
<p>First, your project needs to be on a repository, in my case, I’m using Github. I wrote a Python code that scrapes a webpage and saves the data to a SQLite database, on this example I’ll illustrate this with a much simpler code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Import libraries</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sqlalchemy <span style="color:#f92672">import</span> create_engine
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create random data</span>
</span></span><span style="display:flex;"><span>people <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Ana&#39;</span>, <span style="color:#e6db74">&#39;Bob&#39;</span>, <span style="color:#e6db74">&#39;Charles&#39;</span>, <span style="color:#e6db74">&#39;Daiana&#39;</span>]
</span></span><span style="display:flex;"><span>values <span style="color:#f92672">=</span> [random<span style="color:#f92672">.</span>random(), random<span style="color:#f92672">.</span>random(), random<span style="color:#f92672">.</span>random(), random<span style="color:#f92672">.</span>random()]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create db connection</span>
</span></span><span style="display:flex;"><span>engine <span style="color:#f92672">=</span> create_engine(<span style="color:#e6db74">&#39;sqlite:///data.db&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the dataframe</span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#39;people&#39;</span>: people, <span style="color:#e6db74">&#39;values&#39;</span>: values, <span style="color:#e6db74">&#39;load_date&#39;</span>: datetime<span style="color:#f92672">.</span>now()})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Save the data frame</span>
</span></span><span style="display:flex;"><span>data<span style="color:#f92672">.</span>to_sql(<span style="color:#e6db74">&#39;data&#39;</span>, if_exists<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;append&#39;</span>, con<span style="color:#f92672">=</span>engine, index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><h2 id="setting-the-workflow">Setting the Workflow</h2>
<p>If you run the above code multiple times on a local machine it’ll work, but you’ll notice that on Github it’ll not persist the changes, that is because you need to commit the changes. To do this you’ll need to create a workflow, on your repo create a yaml file on <code>.github/workflow</code>. This file is going to be your workflow, you can choose any name you want.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># name your workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">random data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># definy the frequency it&#39;ll run</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schedule</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#34;0 * * * *&#34;</span> <span style="color:#75715e"># hourly</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ACTIONS_ALLOW_UNSECURE_COMMANDS</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># create the jobs</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generate-latest</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Checkout repo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up Python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#e6db74">&#39;3.10&#39;</span> <span style="color:#75715e"># setting python version to 3.10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install requirements</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">pip3 install -r requirements.txt</span> <span style="color:#75715e"># setting the environment</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run random data</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">python main.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Commit changes</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git config --global user.name &#34;github-actions&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git config --global user.email &#34;action@github.com&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git add -A
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          git commit -m &#34;add more data&#34;</span>          
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push changes</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">ad-m/github-push-action@master</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">github_token</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</span></span></code></pre></div><p>Don&rsquo;t forget to enable workflow permissions, on your repo go to <code>Settings &gt; Actions &gt; General</code>, and select <strong>Read and write permissions</strong>.</p>
<p><img loading="lazy" src="https://i.imgur.com/pOym60i.png#center" alt="workflow permissions from github official website"  />
</p>
<h2 id="conclusion">Conclusion</h2>
<p>This can be a good free alternative in case you want to be able to share the data you are scrapping or generating. But you still need to keep an eye on Github&rsquo;s limitations when using the free version. See the current usage limits on their <a href="https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits">official website</a>.</p>
<hr>
<p>If you would like to see a real-like application of this you can go to <a href="https://github.com/devmedeiros/nota-fiscal-goiana">this repo</a>. Where I&rsquo;ve implemented a monthly scrapper that saves the data to an SQLite database that is available to everyone.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What is SQL?</title>
      <link>https://devmedeiros.com/post/what-is-sql/</link>
      <pubDate>Tue, 07 Mar 2023 20:02:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/post/what-is-sql/</guid>
      <description>SQL stands for Structured Query Language. A query language is a specialized programming language that you can use to search and change the contents of a database.</description>
      <content:encoded><![CDATA[<p>SQL stands for Structured Query Language. A query language is a specialized programming language that you can use to search and change the contents of a database.</p>
<p>Like English, SQL has different dialects with special keywords. Most keywords on different dialects are the same, these are the standard SQL, but there are more dialects specific to some databases like:</p>
<ul>
<li>PostgreSQL</li>
<li>SQL Server</li>
<li>Oracle SQL</li>
</ul>
<p>When a keyword is specific to a dialect, usually, you can find an equivalent in another dialect. So you can focus on learning your preferred dialect and when you need to use another database you can easily look up how to do what you want in the other dialect, for instance, <code>oracle sql nvl on postgre</code>.</p>
<h2 id="which-should-you-learn">Which should you learn?</h2>
<p>The knowledge from learning any SQL dialect is transferable, so you can choose whichever you like. If you have contact with a database take advantage of that and learn it, but if you don&rsquo;t have any connection any choice will be good enough.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Cleaning Credit Score Classification Dataset</title>
      <link>https://devmedeiros.com/post/data-cleaning-credit-score/</link>
      <pubDate>Sun, 24 Jul 2022 13:06:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/post/data-cleaning-credit-score/</guid>
      <description>How to come up with ways to clean a dataset using Python</description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>Disclaimer:</strong> I&rsquo;ll be talking about how to come up with the python code, if you want to read the actual code please go to this <a href="https://github.com/devmedeiros/credit-score-classification-app/tree/main/notebooks">repo</a>.</p>
</blockquote>
<h2 id="meet-the-credit-score-classification-dataset">Meet the Credit Score Classification Dataset</h2>
<p>The dataset that we&rsquo;ll clean comes from <a href="https://www.kaggle.com/datasets/parisrohan/credit-score-classification?select=train.csv">kaggle</a>, which is the <code>train.csv</code> dataset, but this could be used for the <code>test.csv</code> as well.</p>
<p>There are 28 columns and 100k rows in this dataset. I compiled a feature description table that you can see below.</p>
<table>
<thead>
<tr>
<th>Feature</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ID</code></td>
<td>Represents a unique identification of an entry</td>
</tr>
<tr>
<td><code>Customer_ID</code></td>
<td>Represents a unique identification of a person</td>
</tr>
<tr>
<td><code>Month</code></td>
<td>Represents the month of the year</td>
</tr>
<tr>
<td><code>Name</code></td>
<td>Represents the name of a person</td>
</tr>
<tr>
<td><code>Age</code></td>
<td>Represents the age of the person</td>
</tr>
<tr>
<td><code>SSN</code></td>
<td>Represents the social security number of a person</td>
</tr>
<tr>
<td><code>Occupation</code></td>
<td>Represents the occupation of the person</td>
</tr>
<tr>
<td><code>Annual_Income</code></td>
<td>Represents the annual income of the person</td>
</tr>
<tr>
<td><code>Monthly_Inhand_Salary</code></td>
<td>Represents the monthly base salary of a person</td>
</tr>
<tr>
<td><code>Num_Bank_Accounts</code></td>
<td>Represents the number of bank accounts a person holds</td>
</tr>
<tr>
<td><code>Num_Credit_Card</code></td>
<td>Represents the number of other credit cards held by a person</td>
</tr>
<tr>
<td><code>Interest_Rate</code></td>
<td>Represents the interest rate on a credit card</td>
</tr>
<tr>
<td><code>Num_of_Loan</code></td>
<td>Represents the number of loans taken from the bank</td>
</tr>
<tr>
<td><code>Type_of_Loan</code></td>
<td>Represents the types of loan taken by a person</td>
</tr>
<tr>
<td><code>Delay_from_due_date</code></td>
<td>Represents the average number of days delayed from the payment date</td>
</tr>
<tr>
<td><code>Num_of_Delayed_Payment</code></td>
<td>Represents the average number of payments delayed by a person</td>
</tr>
<tr>
<td><code>Changed_Credit_Limit</code></td>
<td>Represents the percentage change in credit card limit</td>
</tr>
<tr>
<td><code>Num_Credit_Inquiries</code></td>
<td>Represents the number of credit card inquiries</td>
</tr>
<tr>
<td><code>Credit_Mix</code></td>
<td>Represents the classification of the mix of credits</td>
</tr>
<tr>
<td><code>Outstanding_Debt</code></td>
<td>Represents the remaining debt to be paid (in USD)</td>
</tr>
<tr>
<td><code>Credit_Utilization_Ratio</code></td>
<td>Represents the utilization ratio of credit cards</td>
</tr>
<tr>
<td><code>Credit_History_Age</code></td>
<td>Represents the age of credit history of the person</td>
</tr>
<tr>
<td><code>Payment_of_Min_Amount</code></td>
<td>Represents whether only the minimum amount was paid by the person</td>
</tr>
<tr>
<td><code>Total_EMI_per_month</code></td>
<td>Represents the monthly EMI payments (in USD)</td>
</tr>
<tr>
<td><code>Amount_invested_monthly</code></td>
<td>Represents the monthly amount invested by the customer (in USD)</td>
</tr>
<tr>
<td><code>Payment_Behaviour</code></td>
<td>Represents the payment behavior of the customer (in USD)</td>
</tr>
<tr>
<td><code>Monthly_Balance</code></td>
<td>Represents the monthly balance amount of the customer (in USD)</td>
</tr>
<tr>
<td><code>Credit_Score</code></td>
<td>Represents the bracket of credit score (Poor, Standard, Good)</td>
</tr>
</tbody>
</table>
<p>Even though we have 100k rows, within these rows that are only 12,500 different customers, each customer appears 8 times (from January to August). So basically we can select a particular customer and look at their information and easily find incorrect data and be able to adjust it.</p>
<h2 id="cleaning-typos-and-outliers">Cleaning Typos and Outliers</h2>
<p>In this dataset that is a lot of typos or just straight-up nonsense. You&rsquo;ll find some values to be: <code>_</code>, <code>!@9#%8</code>, <code>__10000__</code>, <code>NM</code> or <code>_______</code>. I believe these typos are in the dataset to represent the improbability that you may find when dealing with real-world data and most of them mean that this is a null value.</p>
<p>For a moment I thought <code>__10000__</code> would just be a typo, but there is no amount invested monthly that is over 200 dollars.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>__10000__             4305
</span></span><span style="display:flex;"><span>0.0                    169
</span></span><span style="display:flex;"><span>80.41529543900253        1
</span></span><span style="display:flex;"><span>36.66235139442514        1
</span></span><span style="display:flex;"><span>89.7384893604547         1
</span></span><span style="display:flex;"><span>                      ... 
</span></span><span style="display:flex;"><span>36.541908593249026       1
</span></span><span style="display:flex;"><span>93.45116318631192        1
</span></span><span style="display:flex;"><span>140.80972223052834       1
</span></span><span style="display:flex;"><span>38.73937670100975        1
</span></span><span style="display:flex;"><span>167.1638651610451        1
</span></span><span style="display:flex;"><span>Name: Amount_invested_monthly, Length: 91049, dtype: int64
</span></span></code></pre></div><p>Following this logic, I looked for nonsense in the data frame and I started to replace them with numpy <code>nan</code>&rsquo;s. I also looked for outliers by looking at the distribution of values, if there was a value that only appeared once and was isolated I substitute it for a null value. I based this decision not only on this but also when I looked for customers that had this outlier and I observed all the data from this particular customer, I&rsquo;d see weird things like:</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/devmedeiros/credit-score-classification-app/main/reports/figures/annual_income.png#center" alt="a table displaying information on a given customer and showing an outlier on its annual income"  />
</p>
<p>By looking at this customer is clear that he didn&rsquo;t make this much money annually only one month of the year.</p>
<p>When you finish this search for typos and outliers don&rsquo;t forget to assign the correct data type to your features. Some features like <code>age</code> started with string characters among the age values and because of this, it&rsquo;s uploaded as an object instead of int or float.</p>
<h2 id="filling-null-values">Filling Null Values</h2>
<p>After dealing with all the outliers and typos, we ended up with a lot of null values, as you can see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>isna()<span style="color:#f92672">.</span>sum()[df<span style="color:#f92672">.</span>isna()<span style="color:#f92672">.</span>sum() <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>Age                         2776
</span></span><span style="display:flex;"><span>Occupation                  7062
</span></span><span style="display:flex;"><span>Annual_Income                993
</span></span><span style="display:flex;"><span>Monthly_Inhand_Salary      15002
</span></span><span style="display:flex;"><span>Num_Credit_Card             2271
</span></span><span style="display:flex;"><span>Interest_Rate               2034
</span></span><span style="display:flex;"><span>Num_of_Loan                 4348
</span></span><span style="display:flex;"><span>Type_of_Loan               11408
</span></span><span style="display:flex;"><span>Num_of_Delayed_Payment      7002
</span></span><span style="display:flex;"><span>Changed_Credit_Limit        2091
</span></span><span style="display:flex;"><span>Num_Credit_Inquiries        1965
</span></span><span style="display:flex;"><span>Credit_Mix                 20195
</span></span><span style="display:flex;"><span>Credit_History_Age          9030
</span></span><span style="display:flex;"><span>Payment_of_Min_Amount      12007
</span></span><span style="display:flex;"><span>Amount_invested_monthly     8784
</span></span><span style="display:flex;"><span>Payment_Behaviour           7600
</span></span><span style="display:flex;"><span>Monthly_Balance             1200
</span></span><span style="display:flex;"><span>dtype: int64
</span></span></code></pre></div><p>Instead of just dropping all these null values I first try to fill them using the information I already have. Remember that I said that a customer has historical data for 8 months? We can just use this historical data to fill the null values using an aggregation measurement of our choice filtering for the customer, this will be more accurate than just calculating the mean value of the database.</p>
<p>I decided to use the average values for the following columns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mean_columns <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Num_of_Delayed_Payment&#39;</span>, <span style="color:#e6db74">&#39;Changed_Credit_Limit&#39;</span>, <span style="color:#e6db74">&#39;Num_Credit_Inquiries&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Amount_invested_monthly&#39;</span>, <span style="color:#e6db74">&#39;Monthly_Balance&#39;</span>, <span style="color:#e6db74">&#39;Num_of_Loan&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Num_Credit_Card&#39;</span>, <span style="color:#e6db74">&#39;Interest_Rate&#39;</span>, <span style="color:#e6db74">&#39;Annual_Income&#39;</span>, <span style="color:#e6db74">&#39;Monthly_Inhand_Salary&#39;</span>
</span></span><span style="display:flex;"><span>    ]
</span></span></code></pre></div><p>And the last non-empty value for these:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>last_columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Age&#39;</span>, <span style="color:#e6db74">&#39;Occupation&#39;</span>, <span style="color:#e6db74">&#39;Type_of_Loan&#39;</span>, <span style="color:#e6db74">&#39;Credit_Mix&#39;</span>]
</span></span></code></pre></div><p>The reason for not using the mean for all my values is that I didn&rsquo;t want to have someone be 20.5 years old and <code>Occupation</code>, <code>Type_of_Loan</code>, and <code>Credit_Mix</code> are discrete data.</p>
<h2 id="feature-engineering">Feature Engineering</h2>
<p>With the clean data, we can proceed to feature engineering. In this case, we first want to change the <code>Type_of_Loan</code>, because that are some occurrences that it has all the loans in one value, as you can see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>Not Specified, Mortgage Loan, Auto Loan, and Payday Loan                                                                                         8
</span></span><span style="display:flex;"><span>Payday Loan, Mortgage Loan, Debt Consolidation Loan, and Student Loan                                                                            8
</span></span><span style="display:flex;"><span>Debt Consolidation Loan, Auto Loan, Personal Loan, Debt Consolidation Loan, Student Loan, and Credit-Builder Loan                                8
</span></span><span style="display:flex;"><span>Student Loan, Auto Loan, Student Loan, Credit-Builder Loan, Home Equity Loan, Debt Consolidation Loan, and Debt Consolidation Loan               8
</span></span><span style="display:flex;"><span>Personal Loan, Auto Loan, Mortgage Loan, Student Loan, and Student Loan                                                                          8
</span></span><span style="display:flex;"><span>Name: Type_of_Loan, Length: 5380, dtype: int64
</span></span></code></pre></div><p>So I&rsquo;ll save all the different loan types in one vector, by splitting the loans every time there is a <code>,</code> or <code>, and</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>loan_types <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> df<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>    temp <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>Type_of_Loan[index]<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;and &#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;, &#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> temp: <span style="color:#75715e">#loan in temp array</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> loan_types: <span style="color:#75715e">#if loan is not in loan_types</span>
</span></span><span style="display:flex;"><span>            loan_types<span style="color:#f92672">.</span>append(i) <span style="color:#75715e">#add it</span>
</span></span></code></pre></div><p>Now we can create dummy variables of these <code>loan_types</code>, so a customer will receive the number 1 if they have this loan or a 0 if they don&rsquo;t.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> loan <span style="color:#f92672">in</span> loan_types:
</span></span><span style="display:flex;"><span>    df[loan] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#75715e">#create the loan column in the df with 0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> df<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>        temp <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>Type_of_Loan[index]<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;and &#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;, &#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> loan <span style="color:#f92672">in</span> temp:
</span></span><span style="display:flex;"><span>            df<span style="color:#f92672">.</span>loc[index, loan] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Now I want to keep working on this dataset to make it ready for training a machine learning model. For this reason, I need to transform my discrete data into numeric.</p>
<p>The feature <code>Credit_History_Age</code> has the values as strings &ldquo;22 Years and 5 Months&rdquo;, this pattern repeats itself, so we can take advantage of this and select the year multiplied by 12 and sum the month, resulting in a new feature with the credit history age in months. When we are done with this, there are still going to be null values, to fill them I choose to interpolate the values, this works great when the missing value is in February up until July because it interpolates with the customer&rsquo;s credit history age, but it becomes a bad guessed when the missing value is in January or August.</p>
<p>The months&rsquo; names are going to be replaced by their number counterpart, so January is 1, February is 2, and so on. <code>credit_mix</code> and <code>credit_score</code> have 3 sequential categories, I choose to go with -1, 0, and 1, but you can use 1, 2, 3 and it&rsquo;ll produce the same result.</p>
<p>Don&rsquo;t forget to check the GitHub <a href="https://github.com/devmedeiros/credit-score-classification-app/tree/main/">Repository</a> for the complete code mentioned here and the cleaned dataset.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
