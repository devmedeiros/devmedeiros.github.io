<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>pandas on devmedeiros</title>
    <link>https://devmedeiros.com/pt/tags/pandas/</link>
    <description>Recent content in pandas on devmedeiros</description>
    <image>
      <title>devmedeiros</title>
      <url>https://devmedeiros.com/cover.png</url>
      <link>https://devmedeiros.com/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 24 Jul 2022 13:06:00 -0300</lastBuildDate><atom:link href="https://devmedeiros.com/pt/tags/pandas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Limpando Base de Dados para Classificação de Score de Crédito</title>
      <link>https://devmedeiros.com/pt/post/data-cleaning-credit-score/</link>
      <pubDate>Sun, 24 Jul 2022 13:06:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/pt/post/data-cleaning-credit-score/</guid>
      <description>Como surgir com formas de limpar um banco de dados usando Python</description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>Aviso:</strong> Eu estarei falando sobre como chegar no código python, caso queira ler o código em si, dirija-se a este <a href="https://github.com/devmedeiros/credit-score-classification-app/tree/main/notebooks">repositório</a>.</p>
</blockquote>
<h2 id="conheça-a-base-para-classificação-de-score-de-crédito">Conheça a Base para Classificação de Score de Crédito</h2>
<p>A base de dados que vamos limpar vem do <a href="https://www.kaggle.com/datasets/parisrohan/credit-score-classification?select=train.csv">kaggle</a>, a qual está no arquivo <code>train.csv</code>, mas os passos que iremos falar também podem ser usados para <code>test.csv</code>.</p>
<p>Há 28 colunas e 100 mil linhas neste banco de dados. Eu compilei uma descrição das variáveis na tabela a seguir.</p>
<table>
<thead>
<tr>
<th>Variável</th>
<th>Descrição</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ID</code></td>
<td>Representa uma identificação única de uma entrada</td>
</tr>
<tr>
<td><code>Customer_ID</code></td>
<td>Representa uma identificação única de uma pessoa</td>
</tr>
<tr>
<td><code>Month</code></td>
<td>Representa o mês do ano</td>
</tr>
<tr>
<td><code>Name</code></td>
<td>Representa o nome de uma pessoa</td>
</tr>
<tr>
<td><code>Age</code></td>
<td>Representa a idade de uma pessoa</td>
</tr>
<tr>
<td><code>SSN</code></td>
<td>Representa o número social de uma pessoa americana</td>
</tr>
<tr>
<td><code>Occupation</code></td>
<td>Representa a profissão de uma pessoa</td>
</tr>
<tr>
<td><code>Annual_Income</code></td>
<td>Representa o salário anual de uma pessoa</td>
</tr>
<tr>
<td><code>Monthly_Inhand_Salary</code></td>
<td>Representa o salário mensal base de uma pessoa</td>
</tr>
<tr>
<td><code>Num_Bank_Accounts</code></td>
<td>Representa quantas contas bancárias uma pessoa possui</td>
</tr>
<tr>
<td><code>Num_Credit_Card</code></td>
<td>Representa o número de cartões de crédito que uma pessoa possui</td>
</tr>
<tr>
<td><code>Interest_Rate</code></td>
<td>Representa a taxa de juros de um cartão de crédito</td>
</tr>
<tr>
<td><code>Num_of_Loan</code></td>
<td>Representa quantos empréstimos uma pessoa fez com o banco</td>
</tr>
<tr>
<td><code>Type_of_Loan</code></td>
<td>Representa os tipos de empréstimos feitos por uma pessoa</td>
</tr>
<tr>
<td><code>Delay_from_due_date</code></td>
<td>Representa o numero médio de dias atrasados da data de pagamento</td>
</tr>
<tr>
<td><code>Num_of_Delayed_Payment</code></td>
<td>Representa o numério médio de pagamentos atrasados feitos por uma pessoa</td>
</tr>
<tr>
<td><code>Changed_Credit_Limit</code></td>
<td>Representa, em porcentagem, a mudança de limite do cartão de crédito</td>
</tr>
<tr>
<td><code>Num_Credit_Inquiries</code></td>
<td>Representa o número de consultas de cartão de crédito</td>
</tr>
<tr>
<td><code>Credit_Mix</code></td>
<td>Representa a classificação da mistura de créditos</td>
</tr>
<tr>
<td><code>Outstanding_Debt</code></td>
<td>Representa a quantidade de saldo devedor a ser pago em dólares americanos</td>
</tr>
<tr>
<td><code>Credit_Utilization_Ratio</code></td>
<td>Representa a proporção de utilização de cartões de crédito</td>
</tr>
<tr>
<td><code>Credit_History_Age</code></td>
<td>Representa a idade do histórico de uso de crédito de uma pessoa</td>
</tr>
<tr>
<td><code>Payment_of_Min_Amount</code></td>
<td>Representa se uma pessoa pagou apenas o mínimo</td>
</tr>
<tr>
<td><code>Total_EMI_per_month</code></td>
<td>Representa os pagamentos das parcelas mensais de empréstimos em dólares americanos</td>
</tr>
<tr>
<td><code>Amount_invested_monthly</code></td>
<td>Representa a quantidade de dinheiro investido pelo cliente em dólares americanos</td>
</tr>
<tr>
<td><code>Payment_Behaviour</code></td>
<td>Representa o comportamento de pagamento do cliente em dólares americanos</td>
</tr>
<tr>
<td><code>Monthly_Balance</code></td>
<td>Representa o extrato mensal do cliente em dólares americanos</td>
</tr>
<tr>
<td><code>Credit_Score</code></td>
<td>Representa as faixas de score de crédito (Baixo, Médio, Bom)</td>
</tr>
</tbody>
</table>
<p>Mesmo tendo 100 mil linhas, dentro dessas linhas existem apenas 12.500 clientes diferentes, cada cliente aparece 8 vezes (de Janeiro a Agosto). Então basicamente nós podemos selecionar um cliente específico e olhar as informações dele e facilmente identificar dados incorretos e somos capazes de ajustá-los.</p>
<h2 id="lidando-com-erros-de-digitação-e-outliers">Lidando com Erros de Digitação e Outliers</h2>
<p>Neste banco de dados há diversos erros de digitação ou simplesmente coisas que não fazem sentido. Você irá encontrar valores que são: <code>_</code>, <code>!@9#%8</code>, <code>__10000__</code>, <code>NM</code> ou <code>_______</code>. Eu acredito que esses erros estão na base para representar o caos que você pode encontrar quando estiver lidando com dados reais e a maioria deles significam que esse valor é nulo.</p>
<p>Por um momento eu pensei que <code>__10000__</code> poderia ser apenas um erro de digitação, mas não há nenhuma quantidade de dinheiro investida mensalmente que é superior a 200 dólares americanos.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>__10000__             4305
</span></span><span style="display:flex;"><span>0.0                    169
</span></span><span style="display:flex;"><span>80.41529543900253        1
</span></span><span style="display:flex;"><span>36.66235139442514        1
</span></span><span style="display:flex;"><span>89.7384893604547         1
</span></span><span style="display:flex;"><span>                      ... 
</span></span><span style="display:flex;"><span>36.541908593249026       1
</span></span><span style="display:flex;"><span>93.45116318631192        1
</span></span><span style="display:flex;"><span>140.80972223052834       1
</span></span><span style="display:flex;"><span>38.73937670100975        1
</span></span><span style="display:flex;"><span>167.1638651610451        1
</span></span><span style="display:flex;"><span>Name: Amount_invested_monthly, Length: 91049, dtype: int64
</span></span></code></pre></div><p>Seguindo essa lógica, eu procurei por mais coisas que não faziam sentido no data frame e comecei a substituir esses valores pelos <code>nan</code>s do numpy. Eu também procurei por outliers olhando a distribuição dos valores, se havia um valor que aparecia apenas uma vez e ele estava isolado, eu o substituia por um valor nulo. Eu não baseiei essa decisão apenas nisso, eu também procurei por clientes que tinham esse outlier e observei todos os dados desse cliente específico, e eu sempre encontrava coisas estranhas como:</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/devmedeiros/credit-score-classification-app/main/reports/figures/annual_income.png#center" alt="uma tabela mostrando informação sobre um cliente específico e mostrando um outlier na sua receita anual"  />
</p>
<p>Olhando para este cliente em específico é fácil ver que ele não ganhou todo esse dinheiro anualmente apenas um mês do ano.</p>
<p>Ao terminar essa busca por erros de digitação e outliers, não esqueça de passar o novo tipo de dados para suas variáveis. Algumas variáveis como <code>age</code> começaram com caracteres string entre as idades e por isso ao ser feito a leitura dos dados o pandas os reconheceu como objeto e não como tipo int ou float.</p>
<h2 id="preenchendo-valores-em-branco">Preenchendo Valores em Branco</h2>
<p>Depois de lidar com todos os outliers e erros de digitação, nós terminamos com diversos valores nulos, como pode ser visto a baixo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>isna()<span style="color:#f92672">.</span>sum()[df<span style="color:#f92672">.</span>isna()<span style="color:#f92672">.</span>sum() <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>Age                         2776
</span></span><span style="display:flex;"><span>Occupation                  7062
</span></span><span style="display:flex;"><span>Annual_Income                993
</span></span><span style="display:flex;"><span>Monthly_Inhand_Salary      15002
</span></span><span style="display:flex;"><span>Num_Credit_Card             2271
</span></span><span style="display:flex;"><span>Interest_Rate               2034
</span></span><span style="display:flex;"><span>Num_of_Loan                 4348
</span></span><span style="display:flex;"><span>Type_of_Loan               11408
</span></span><span style="display:flex;"><span>Num_of_Delayed_Payment      7002
</span></span><span style="display:flex;"><span>Changed_Credit_Limit        2091
</span></span><span style="display:flex;"><span>Num_Credit_Inquiries        1965
</span></span><span style="display:flex;"><span>Credit_Mix                 20195
</span></span><span style="display:flex;"><span>Credit_History_Age          9030
</span></span><span style="display:flex;"><span>Payment_of_Min_Amount      12007
</span></span><span style="display:flex;"><span>Amount_invested_monthly     8784
</span></span><span style="display:flex;"><span>Payment_Behaviour           7600
</span></span><span style="display:flex;"><span>Monthly_Balance             1200
</span></span><span style="display:flex;"><span>dtype: int64
</span></span></code></pre></div><p>Ao invés de apagar todos os valores em branco eu primeiro tento preencher eles usando informação que já temos disponível. Lembra que eu mencionei que um cliente possui dados históricos de 8 meses atrás? Nós podemos apenas usar esses dados históricos para preencher os valores nulos usando uma medida resumo da nossa escolha filtrando para o cliente, isso será mais preciso do que apenas calcular a média do nosso banco de dados.</p>
<p>Eu decidir usar o valor médio para as seguintes colunas:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mean_columns <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Num_of_Delayed_Payment&#39;</span>, <span style="color:#e6db74">&#39;Changed_Credit_Limit&#39;</span>, <span style="color:#e6db74">&#39;Num_Credit_Inquiries&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Amount_invested_monthly&#39;</span>, <span style="color:#e6db74">&#39;Monthly_Balance&#39;</span>, <span style="color:#e6db74">&#39;Num_of_Loan&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Num_Credit_Card&#39;</span>, <span style="color:#e6db74">&#39;Interest_Rate&#39;</span>, <span style="color:#e6db74">&#39;Annual_Income&#39;</span>, <span style="color:#e6db74">&#39;Monthly_Inhand_Salary&#39;</span>
</span></span><span style="display:flex;"><span>    ]
</span></span></code></pre></div><p>E o último valor não nulo para estas:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>last_columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Age&#39;</span>, <span style="color:#e6db74">&#39;Occupation&#39;</span>, <span style="color:#e6db74">&#39;Type_of_Loan&#39;</span>, <span style="color:#e6db74">&#39;Credit_Mix&#39;</span>]
</span></span></code></pre></div><p>O motivo de não usar a média para todos os meus valores é porque eu não queria ter que lidar com uma pessoa tendo 20,5 anos de idade e <code>Occupation</code>, <code>Type_of_Loan</code>, e <code>Credit_Mix</code> são dados discretos.</p>
<h2 id="engenharia-das-features">Engenharia das Features</h2>
<p>Com os dados limpos, nós podemos seguir com a engenharia das features. Vamos começar com a variável <code>Type_of_Loan</code>, que possui algumas ocorrências em que em uma única célula possui diversos tipos de empréstimos, como você pode ver:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>Not Specified, Mortgage Loan, Auto Loan, and Payday Loan                                                                                         8
</span></span><span style="display:flex;"><span>Payday Loan, Mortgage Loan, Debt Consolidation Loan, and Student Loan                                                                            8
</span></span><span style="display:flex;"><span>Debt Consolidation Loan, Auto Loan, Personal Loan, Debt Consolidation Loan, Student Loan, and Credit-Builder Loan                                8
</span></span><span style="display:flex;"><span>Student Loan, Auto Loan, Student Loan, Credit-Builder Loan, Home Equity Loan, Debt Consolidation Loan, and Debt Consolidation Loan               8
</span></span><span style="display:flex;"><span>Personal Loan, Auto Loan, Mortgage Loan, Student Loan, and Student Loan                                                                          8
</span></span><span style="display:flex;"><span>Name: Type_of_Loan, Length: 5380, dtype: int64
</span></span></code></pre></div><p>Então eu vou salvar todos os tipos de empréstimos diferentes em um vetor, separando todos os empréstimos sempre que surgir uma <code>,</code> ou <code>, and</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>loan_types <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> df<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>    temp <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>Type_of_Loan[index]<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;and &#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;, &#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> temp: <span style="color:#75715e">#loan in temp array</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> loan_types: <span style="color:#75715e">#if loan is not in loan_types</span>
</span></span><span style="display:flex;"><span>            loan_types<span style="color:#f92672">.</span>append(i) <span style="color:#75715e">#add it</span>
</span></span></code></pre></div><p>Agora podemos criar variáveis dummies usando <code>loan_types</code>, assim um cliente recebe o número 1 se ele tiver esse empréstimo ou 0 caso não tenha.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> loan <span style="color:#f92672">in</span> loan_types:
</span></span><span style="display:flex;"><span>    df[loan] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#75715e">#create the loan column in the df with 0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> df<span style="color:#f92672">.</span>index:
</span></span><span style="display:flex;"><span>        temp <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>Type_of_Loan[index]<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;and &#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;, &#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> loan <span style="color:#f92672">in</span> temp:
</span></span><span style="display:flex;"><span>            df<span style="color:#f92672">.</span>loc[index, loan] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Agora eu continuo trabalhando nesse banco para o tornar pronto para o treinamento de um modelo de aprendizado de máquina. Para isso, eu preciso transformar todos os meus dados discretos em numéricos.</p>
<p>A variável <code>Credit_History_Age</code> tem os valores como strings &ldquo;22 Years and 5 Months&rdquo; e esse padrão se repete, então podemos aproveitar isso e selecionar o ano multiplicado por 12 e somar o mês, resultando em um novo recurso com o crédito idade da história em meses. Quando acabarmos com isso ainda haverá valores nulos e, para preenchê-los, escolho interpolar os valores. Isso funciona muito bem quando o valor ausente é de fevereiro até julho porque interpola com a idade do histórico de crédito do cliente, mas torna-se uma suposição incorreta quando o valor ausente é em janeiro ou agosto.</p>
<p>Os nomes dos meses serão substituidos pelo seu representante numérico, logo janeiro será 1, fevereiro será 2, e assim por diante. <code>credit_mix</code> e <code>credit_score</code> possuem 3 categorias sequenciais, eu escolhi usar -1, 0, e 1, mas você também pode usar 1, 2, 3 e irá produzir o mesmo resultado.</p>
<p>Não se esqueça de checar o <a href="https://github.com/devmedeiros/credit-score-classification-app/tree/main/">repositório</a> no GitHub caso queira ver o código completo mencionado aqui e para baixar a base tratada.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Guia do Pacote de Python seaborn</title>
      <link>https://devmedeiros.com/pt/post/2021-11-07-seaborn-package-guide/</link>
      <pubDate>Sun, 07 Nov 2021 15:14:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/pt/post/2021-11-07-seaborn-package-guide/</guid>
      <description>Um guia simples de como fazer gráficos básicos usando o pacote seaborn do Python</description>
      <content:encoded><![CDATA[<h2 id="introdução">Introdução</h2>
<p>Eu estou aprendendo visualização de dados no Python e eu me vejo como alguém que aprende fazendo, por isso eu vou fazer alguns gráficos simples usando o pacote <code>seaborn</code> que poderão ser utilizados como referência sempre que precisar refrescar a memória.</p>
<p>Primeiramente é necessários que os pacotes estejam propriamente importados, após isso eu carrego o banco de dados <em>iris</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://git.io/JXciW&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>iris <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(url)
</span></span></code></pre></div><p>Caso não esteja familiarizado com o banco de dados <em>iris</em>, veja as cinco primeiras linhas dele a seguir:</p>
<table>
<thead>
<tr>
<th>sepal_length</th>
<th>sepal_width</th>
<th>petal_length</th>
<th>petal_width</th>
<th>species</th>
</tr>
</thead>
<tbody>
<tr>
<td>5.1</td>
<td>3.5</td>
<td>1.4</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr>
<td>4.9</td>
<td>3.0</td>
<td>1.4</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr>
<td>4.7</td>
<td>3.2</td>
<td>1.3</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr>
<td>4.6</td>
<td>3.1</td>
<td>1.5</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr>
<td>5.0</td>
<td>3.6</td>
<td>1.4</td>
<td>0.2</td>
<td>setosa</td>
</tr>
</tbody>
</table>
<h2 id="gráfico-de-barras">Gráfico de barras</h2>
<p>Criar um simples gráfico de barras.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>barplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;species&#34;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>, data<span style="color:#f92672">=</span>iris)
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/barplot_EGCCNkum4y.jpg?updatedAt=1636308224965" alt="seaborn barplot species x petal_width"  />
</p>
<p>Fazendo um gráfico de barras horizontais.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>barplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;species&#34;</span>, data<span style="color:#f92672">=</span>iris)
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/horizontal-barplot_pcHXoAQWTH.jpg?updatedAt=1636308226028" alt="seaborn barplot horizontal species x petal_width"  />
</p>
<p>Ordem das barras personalizada.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>barplot(
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;species&#34;</span>,
</span></span><span style="display:flex;"><span>    y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>,
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">=</span>iris,
</span></span><span style="display:flex;"><span>    order<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;virginica&#34;</span>, <span style="color:#e6db74">&#34;setosa&#34;</span>, <span style="color:#e6db74">&#34;versicolor&#34;</span>])
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/barplot-custom-order_hUl5vUQOi.jpg?updatedAt=1636308225481" alt="seaborn barplot custom bar order"  />
</p>
<p>Acrescentar limites para as barras de erro.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>barplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;species&#34;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>, data<span style="color:#f92672">=</span>iris, capsize<span style="color:#f92672">=</span><span style="color:#ae81ff">.2</span>)
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/barplot-cap-error-bar_xD7fHewAZ.jpg?updatedAt=1636308225172" alt="seaborn barplot caps error"  />
</p>
<p>Gráfico de barra sem barras de erro.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>barplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;species&#34;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>, data<span style="color:#f92672">=</span>iris, ci<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/barplot-no-cap-error_5sf2jPDpBag.jpg?updatedAt=1636308225717" alt="barplot no error bar"  />
</p>
<h2 id="gráfico-de-dispersão">Gráfico de dispersão</h2>
<p>Um gráfico de dispersão simples.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>scatterplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sepal_width&#34;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>, data<span style="color:#f92672">=</span>iris)
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/scatterplot_nj8frw1JV.jpg?updatedAt=1636308224619" alt="seaborn scatterplot"  />
</p>
<p>Acrescentando grupos no gráfico de dispersão.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>scatterplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sepal_width&#34;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>, data<span style="color:#f92672">=</span>iris, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;species&#34;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/scatterplot-grouped_JHOKt9xydY.jpg?updatedAt=1636308224802" alt="seaborn scatterplot grouped"  />
</p>
<p>Acrescentando grupos e escalando os pontos de um gráfico de dispersão.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>scatterplot(
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sepal_width&#34;</span>,
</span></span><span style="display:flex;"><span>    y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>,
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">=</span>iris,
</span></span><span style="display:flex;"><span>    hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sepal_length&#34;</span>,
</span></span><span style="display:flex;"><span>    size<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sepal_length&#34;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/scatterplot-grouped-size_mZJt-TjEv.jpg?updatedAt=1636308224806" alt="seaborn scatterplot grouped size"  />
</p>
<h2 id="legenda-e-eixos">Legenda e Eixos</h2>
<p>Para mover a legenda do gráfico para fora da área de plotagem, você pode utilizar <code>bbox_to_anchor = (1,1), loc=2</code>. O gráfico a seguir possui um titulo personalizado, um novo título para o eixo x e pro eixo y.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>scatterplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sepal_width&#34;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;petal_width&#34;</span>, data<span style="color:#f92672">=</span>iris, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;species&#34;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend(
</span></span><span style="display:flex;"><span>    title<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Species&#34;</span>,
</span></span><span style="display:flex;"><span>    bbox_to_anchor <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>),
</span></span><span style="display:flex;"><span>    loc<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#34;Sepal Width&#34;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#34;Petal Width&#34;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#34;Sepal Width x Petal Width&#34;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/python_seaborn/title-axis-outside-legend__zUIAf_2427.jpg?updatedAt=1636308224813" alt="seaborn scatterplot outside legend with custom title and axis labels"  />
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
