<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>simulação on devmedeiros</title>
    <link>https://devmedeiros.com/pt/tags/simula%C3%A7%C3%A3o/</link>
    <description>Recent content in simulação on devmedeiros</description>
    <image>
      <title>devmedeiros</title>
      <url>https://devmedeiros.com/cover.png</url>
      <link>https://devmedeiros.com/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 24 Oct 2021 20:43:00 -0300</lastBuildDate><atom:link href="https://devmedeiros.com/pt/tags/simula%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simulação de 21</title>
      <link>https://devmedeiros.com/pt/post/blackjack-simulation/</link>
      <pubDate>Sun, 24 Oct 2021 20:43:00 -0300</pubDate>
      
      <guid>https://devmedeiros.com/pt/post/blackjack-simulation/</guid>
      <description>Uma simulação de 21 usando R e Shiny, você pode rodar um jogo com p jogadores, d baralhos, n vezes</description>
      <content:encoded><![CDATA[<p>O meu objetivo com este projeto é de simular o ambiente de um jogo de 21, também conhecido como <em>blackjack</em>. Assim, eu decidi fazer diversas funções para emular o comportamento do <em>dealer</em>, de um jogador iniciante, um jogador cauteloso e um estrategista. Com esse conjunto de funções você pode rodar um jogo com <strong>p</strong> jogadores, <strong>d</strong> baralhos e quaisquer combinações de arquétipos de jogadores. Além disso, também pode rodar o jogo <strong>n</strong> vezes.</p>
<p>Eu também fiz uma <a href="https://jaqueline-medeiros.shinyapps.io/appa/">aplicação shiny</a> para demonstrar como a simulação funciona. No aplicativo, você é limitado no número de jogadores, mas caso queira rodar o código com mais jogadores eu sugiro que olhe o <a href="https://github.com/devmedeiros/blackjack-simulation">respositório</a> do GitHub. Nele você encontra as regras consideradas para a simulação e o código completo.</p>
<p>Caso seja familiar com a linguagem de programação R, você  também pode rodar o aplicativo localmente, basta carregar a biblioteca do shiny <code>library(shiny)</code> e rodar o código <code>runGitHub(&quot;blackjack-simulation&quot;, &quot;devmedeiros&quot;, ref = &quot;main&quot;)</code>.</p>
<p>O app é composto de uma barra lateral com um espaço para escolher os arquétipos, o número de baralhos a ser usados e quantas rodadas você quer simular. Dependendo de quantas rodadas você escolher a simulação pode ficar mais lenta, pois a simulação roda de acordo com as suas escolhas todas vez que clica no botão <strong>RUN SIMULATION RUN</strong>.</p>
<p>Na aba <em>plot</em>, nota-se a evolução da taxa de perda através das rodadas.</p>
<p><strong>1</strong> quer dizer que o jogador perdeu aquela rodada e um <strong>0</strong> quer dizer que ele ganhou.</p>
<p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/plot_cm7Dhm0u6a.png?updatedAt=1635119435941" alt="Aplicação do shiny, aba plot"  />
</p>
<p>A aba <em>game setup</em> mostra todas as cartas distribuídas na simulação, cada carta foi entregue da esquerda para a direita e uma célula em branco quer dizer que o jogador não pediu pra receber outra carta (<em>hit</em>, bate).</p>
<p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/game-setup_-FspHIe5w.png?updatedAt=1635119436114" alt="Aplicação do shiny, aba game setup"  />
</p>
<p>Por fim, a aba <em>lose rate</em> mostra os mesmo dados da aba <em>plot</em>, mas em formato de tabela. Isso é útil quando se quer analisar como uma estratégia foi melhor do que outra.</p>
<p><img loading="lazy" src="https://ik.imagekit.io/devmedeiros/lose_rate_jPTu-cXHuN.png?updatedAt=1635119436123" alt="Aplicação do shiny, aba lose rate"  />
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
